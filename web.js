// Generated by CoffeeScript 1.6.3
var currentTasks, express, expressServer, http, io, port, request, server, socket_io, _ref;

express = require("express");

http = require("http");

socket_io = require("socket.io");

request = require("request");

currentTasks = {};

expressServer = express();

expressServer.configure(function() {
  expressServer.use(express.bodyParser());
  expressServer.use(function(req, res, next) {
    req.url = (function() {
      switch (req.url) {
        case "/":
          return "/page.html";
        default:
          return req.url;
      }
    })();
    return next();
  });
  expressServer.use(express["static"]("" + __dirname + "/public", {
    maxAge: 0
  }, function(err) {
    return console.log("Static: " + err);
  }));
  return expressServer.use(expressServer.router);
});

server = http.createServer(expressServer);

io = socket_io.listen(server);

io.set("log level", 0);

io.sockets.on("connection", function(socket) {
  socket.on("handshake", function(_arg, callback) {
    var userId, _name;
    userId = _arg.userId;
    return callback({
      tasks: currentTasks[_name = socket.userId = userId] != null ? currentTasks[_name = socket.userId = userId] : currentTasks[_name] = []
    });
  });
  socket.on("addTask", function(_arg, callback) {
    var task;
    task = _arg.task;
    if (socket.userId == null) {
      return callback({
        success: false
      });
    }
    if (currentTasks[socket.userId].some(function(x) {
      return x.path === task.path;
    })) {
      return callback({
        success: false
      });
    }
    currentTasks[socket.userId].push(task);
    callback({
      success: true
    });
    return io.sockets.clients().filter(function(x) {
      return x !== socket && x.userId === socket.userId;
    }).forEach(function(x) {
      return x.emit("addTask", {
        task: task
      });
    });
  });
  return socket.on("removeTask", function(_arg, callback) {
    var taskPath;
    taskPath = _arg.taskPath;
    if (socket.userId == null) {
      return callback({
        success: false
      });
    }
    if (!currentTasks[socket.userId].some(function(x) {
      return x.path === taskPath;
    })) {
      return callback({
        success: false
      });
    }
    currentTasks[socket.userId] = currentTasks[socket.userId].filter(function(x) {
      return x.path !== taskPath;
    });
    callback({
      success: true
    });
    return io.sockets.clients().filter(function(x) {
      return x !== socket && x.userId === socket.userId;
    }).forEach(function(x) {
      return x.emit("removeTask", {
        taskPath: taskPath
      });
    });
  });
});

server.listen((port = (_ref = process.env.PORT) != null ? _ref : 5080), function() {
  return console.log("Listening on port " + port);
});

/*
//@ sourceMappingURL=web.map
*/
