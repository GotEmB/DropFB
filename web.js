// Generated by CoffeeScript 1.6.3
var User, currentDownloads, express, expressServer, http, io, mongoose, port, request, server, socket_io, _ref;

express = require("express");

http = require("http");

socket_io = require("socket.io");

request = require("request");

mongoose = require("mongoose");

currentDownloads = [];

mongoose.connect("mongodb://" + process.env.MONGOUSER + ":" + process.env.MONGOPASS + "@ds037778.mongolab.com:37778/dropfbport");

User = mongoose.model("User", {
  userId: String,
  dbAccessToken: String
});

expressServer = express();

expressServer.configure(function() {
  expressServer.use(express.bodyParser());
  expressServer.use(function(req, res, next) {
    req.url = (function() {
      switch (req.url) {
        case "/":
          return "/page.html";
        default:
          return req.url;
      }
    })();
    return next();
  });
  expressServer.use(express["static"]("" + __dirname + "/public", {
    maxAge: 0
  }, function(err) {
    return console.log("Static: " + err);
  }));
  return expressServer.use(expressServer.router);
});

server = http.createServer(expressServer);

io = socket_io.listen(server);

io.set("log level", 0);

io.sockets.on("connection", function(socket) {
  return socket.on("handshake", function(_arg, callback) {
    var userId;
    userId = _arg.userId;
    return User.findOne({
      userId: userId
    }, function(err, user) {
      if (user != null) {
        return callback({
          dbAccessToken: user.dbAccessToken
        });
      } else {
        return callback({});
      }
    });
  });
});

server.listen((port = (_ref = process.env.PORT) != null ? _ref : 5080), function() {
  return console.log("Listening on port " + port);
});

/*
//@ sourceMappingURL=web.map
*/
