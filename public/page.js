// Generated by CoffeeScript 1.6.3
var appContext, constants,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

require.config({
  paths: {
    jquery: "jquery/jquery-2.0.3.min",
    batman: "batmanjs/batman",
    bootstrap: "//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc1/js/bootstrap.min",
    facebook: "//connect.facebook.net/en_US/all",
    dropbox: "//dropbox.com/static/api/1/dropins",
    socket_io: "socket.io/socket.io"
  },
  shim: {
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    },
    bootstrap: {
      deps: ["jquery"]
    },
    facebook: {
      exports: "FB"
    },
    dropbox: {
      exports: "Dropbox"
    },
    socket_io: {
      exports: "io"
    }
  }
});

constants = {
  videoFormats: ["3g2", "3gp", "3gpp", "asf", "avi", "dat", "divx", "dv", "f4v", "flv", "m2ts", "m4v", "mkv", "mod", "mov", "mp4", "mpe", "mpeg", "mpeg4", "mpg", "mts", "nsv", "ogm", "ogv", "qt", "tod", "ts", "vob", "wmv"],
  fbPermissions: ["user_photos", "photo_upload"]
};

appContext = void 0;

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "facebook", "dropbox", "socket_io", "bootstrap"], function($, Batman, FB, Dropbox, io) {
  var AppContext, DropFB, Task, User, _ref, _ref1;
  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return User;

  })(Batman.Model);
  Task = (function(_super) {
    __extends(Task, _super);

    Task.encode("path", "thumbnail", "type", "caption", "description");

    Task.accessor("isVideo", function() {
      return this.get("type") === "video";
    });

    function Task() {
      Task.__super__.constructor.apply(this, arguments);
      this.set("selected", false);
      this.set("previewLoaded", false);
      this.set("posting", false);
    }

    Task.prototype.toggleSelection = function() {
      return this.set("selected", !this.get("selected"));
    };

    Task.prototype.imgOnLoad = function() {
      return this.set("previewLoaded", true);
    };

    Task.prototype.captionChanged = function() {
      return appContext.socket.emit("captionChanged", {
        taskPath: this.get("path"),
        caption: this.get("caption")
      });
    };

    Task.prototype.descriptionChanged = function() {
      return appContext.socket.emit("descriptionChanged", {
        taskPath: this.get("path"),
        description: this.get("description")
      });
    };

    return Task;

  })(Batman.Model);
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    AppContext.accessor("userLoggedIn", function() {
      return this.get("currentUser") instanceof User;
    });

    AppContext.accessor("selectedTasks", function() {
      var _ref1;
      return (_ref1 = this.get("tasks")) != null ? _ref1.filter(function(x) {
        return x.get("selected");
      }) : void 0;
    });

    AppContext.accessor("selectedTasksCount", function() {
      var _ref1, _ref2;
      return (_ref1 = (_ref2 = this.get("selectedTasks")) != null ? _ref2.length : void 0) != null ? _ref1 : 0;
    });

    AppContext.accessor("noTasksSelected", function() {
      return this.get("selectedTasksCount") === 0;
    });

    AppContext.accessor("allTasksSelected", function() {
      return this.get("selectedTasksCount") === this.get("tasks.length");
    });

    AppContext.accessor("aVideoTaskSelected", function() {
      var _ref1;
      return (_ref1 = this.get("selectedTasks")) != null ? _ref1.some(function(x) {
        return x.get("isVideo");
      }) : void 0;
    });

    function AppContext() {
      var _this = this;
      AppContext.__super__.constructor.apply(this, arguments);
      this.set("pageLoading", "true");
      FB.init({
        appId: "364692580326195",
        status: true
      });
      Dropbox.appKey = "wy7kcrp5mm8debj";
      FB.Event.subscribe("auth.authResponseChange", this.fbLoginStatusChanged = function(_arg) {
        var fbAuthResponse, fbStatus;
        fbStatus = _arg.status, fbAuthResponse = _arg.authResponse;
        if (_this.fbLoginStatusChanged.inProgress != null) {
          return;
        }
        _this.fbLoginStatusChanged.inProgress = true;
        if (fbStatus === "connected" && _this.get("userLoggedIn")) {
          return;
        }
        return FB.api("/me/permissions", function(_arg1) {
          var data, fbPermissions, _ref1, _ref2;
          data = _arg1.data;
          fbPermissions = (_ref1 = data != null ? data[0] : void 0) != null ? _ref1 : {};
          if (fbStatus === "connected" && (fbAuthResponse != null) && constants.fbPermissions.every(function(x) {
            return fbPermissions[x] === 1;
          })) {
            _this.socket = io.connect();
            _this.socket.on("connect", function() {
              return FB.api("/me", function(_arg2) {
                var name;
                name = _arg2.name;
                FB.api("/me/albums?fields=name,can_upload", function(_arg3) {
                  var albums;
                  albums = _arg3.data;
                  return _this.set("albums", (function(func, args, ctor) {
                    ctor.prototype = func.prototype;
                    var child = new ctor, result = func.apply(child, args);
                    return Object(result) === result ? result : child;
                  })(Batman.Set, albums.filter(function(x) {
                    return x.can_upload;
                  }).map(function(x) {
                    return {
                      id: x.id,
                      name: x.name
                    };
                  }), function(){}));
                });
                return _this.socket.emit("handshake", {
                  userId: fbAuthResponse.userID
                }, function(_arg3) {
                  var task, tasks, _ref2;
                  tasks = _arg3.tasks;
                  _this.set("currentUser", new User({
                    name: name,
                    userId: fbAuthResponse.userID
                  }));
                  _this.set("tasks", new Batman.Set);
                  (_ref2 = _this.get("tasks")).add.apply(_ref2, (function() {
                    var _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
                      task = tasks[_i];
                      _results.push(new Task(task));
                    }
                    return _results;
                  })());
                  _this.set("pageLoading", false);
                  return delete _this.fbLoginStatusChanged.inProgress;
                });
              });
            });
            _this.socket.on("addTask", function(_arg2) {
              var task;
              task = _arg2.task;
              return _this.get("tasks").add(new Task(task));
            });
            _this.socket.on("removeTask", function(_arg2) {
              var taskPath;
              taskPath = _arg2.taskPath;
              return _this.get("tasks").remove(_this.get("tasks").find(function(x) {
                return x.get("path") === taskPath;
              }));
            });
            _this.socket.on("captionChanged", function(_arg2) {
              var caption, taskPath, _ref2;
              taskPath = _arg2.taskPath, caption = _arg2.caption;
              return (_ref2 = _this.get("tasks").find(function(x) {
                return x.get("path") === taskPath;
              })) != null ? _ref2.set("caption", caption) : void 0;
            });
            return _this.socket.on("descriptionChanged", function(_arg2) {
              var description, taskPath, _ref2;
              taskPath = _arg2.taskPath, description = _arg2.description;
              if (taskPath === _this.get("path")) {
                return (_ref2 = _this.get("tasks").find(function(x) {
                  return x.get("path") === taskPath;
                })) != null ? _ref2.set("description", description) : void 0;
              }
            });
          } else {
            _this.unset("currentUser");
            if ((_ref2 = _this.socket) != null) {
              _ref2.disconnect();
            }
            _this.set("pageLoading", false);
            _this.unset("tasks");
            _this.unset("albums");
            return delete _this.fbLoginStatusChanged.inProgress;
          }
        });
      });
      FB.getLoginStatus(this.fbLoginStatusChanged);
    }

    AppContext.prototype.fbLogin = function() {
      return FB.login((function() {}), {
        scope: constants.fbPermissions.join(",")
      });
    };

    AppContext.prototype.dbChooseFiles = function() {
      var _this = this;
      return Dropbox.choose({
        linkType: "direct",
        multiselect: true,
        success: function(files) {
          var file, _i, _len, _ref1, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (((_ref1 = JSON.stringify(file.thumbnails)) !== (void 0) && _ref1 !== "null" && _ref1 !== "{}") && file.bytes < 1 << 30 && (_this.get("tasks").find(function(x) {
              return x.get("path") === file.link;
            }) == null)) {
              _results.push((function(file) {
                var task, _ref2;
                task = new Task({
                  path: file.link,
                  thumbnail: file.thumbnails["640x480"],
                  type: (_ref2 = file.name.toLowerCase().match(/[a-z0-9]+$/g)[0], __indexOf.call(constants.videoFormats, _ref2) >= 0) ? "video" : "photo"
                });
                return _this.socket.emit("addTask", {
                  task: task.toJSON()
                }, function(_arg) {
                  var success;
                  success = _arg.success;
                  if (success) {
                    return _this.get("tasks").add(task);
                  }
                });
              })(file));
            }
          }
          return _results;
        }
      });
    };

    AppContext.prototype.unselectAllTasks = function() {
      return this.get("tasks").forEach(function(x) {
        return x.set("selected", false);
      });
    };

    AppContext.prototype.selectAllTasks = function() {
      return this.get("tasks").forEach(function(x) {
        return x.set("selected", true);
      });
    };

    AppContext.prototype.removeSelectedTasks = function() {
      var _this = this;
      return this.get("selectedTasks").forEach(function(task) {
        return _this.socket.emit("removeTask", {
          taskPath: task.get("path")
        }, function(_arg) {
          var success;
          success = _arg.success;
          if (success) {
            return _this.get("tasks").remove(task);
          }
        });
      });
    };

    AppContext.prototype.uploadTasks = function() {
      var _this = this;
      return this.get("selectedTasks").forEach(function(task) {
        task.set("posting", true);
        return _this.socket.emit("uploadTask", {
          fbAccessToken: FB.getAuthResponse().accessToken,
          taskPath: task.get("path")
        }, function(_arg) {
          var success;
          success = _arg.success;
          if (success) {
            task.set("posting_success", true);
          }
          if (!success) {
            return task.set("posting_failure", true);
          }
        });
      });
    };

    return AppContext;

  })(Batman.Model);
  DropFB = (function(_super) {
    __extends(DropFB, _super);

    function DropFB() {
      _ref1 = DropFB.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    DropFB.appContext = appContext = new AppContext;

    return DropFB;

  })(Batman.App);
  DropFB.run();
  return $(function() {
    return $("#navbar2").affix({
      offset: {
        top: 75
      }
    });
  });
});

/*
//@ sourceMappingURL=page.map
*/
