// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  paths: {
    jquery: "jquery/jquery-2.0.3.min",
    batman: "batmanjs/batman",
    bootstrap: "twitter/bootstrap.min",
    facebook: "//connect.facebook.net/en_US/all",
    dropbox: "//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.0/dropbox.min",
    socket_io: "socket.io/socket.io"
  },
  shim: {
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    },
    bootstrap: {
      deps: ["jquery"]
    },
    facebook: {
      exports: "FB"
    },
    dropbox: {
      exports: "Dropbox"
    },
    socket_io: {
      exports: "io"
    }
  }
});

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "facebook", "dropbox", "socket_io", "bootstrap"], function($, Batman, FB, Dropbox, io) {
  var AppContext, DropFB, User, _ref, _ref1;
  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return User;

  })(Batman.Model);
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    AppContext.accessor("userLoggedIn", function() {
      return this.get("currentUser") instanceof User;
    });

    AppContext.accessor("requireDbAuth", function() {
      return this.get("userLoggedIn") && (this.get("currentUser.dbAccessToken") == null);
    });

    function AppContext() {
      var socket,
        _this = this;
      this.set("pageLoading", "true");
      socket = void 0;
      FB.init({
        appId: "364692580326195",
        status: true
      });
      Dropbox = new Dropbox.Client({
        key: "wy7kcrp5mm8debj"
      });
      FB.Event.subscribe("auth.authResponseChange", this.fbLoginStatusChanged = function(_arg) {
        var fbAuthResponse, fbStatus;
        fbStatus = _arg.status, fbAuthResponse = _arg.authResponse;
        if (_this.fbLoginStatusChanged.inProgress != null) {
          return;
        }
        _this.fbLoginStatusChanged.inProgress = true;
        if (fbStatus === "connected" && _this.get("userLoggedIn")) {
          return;
        }
        if (fbStatus === "connected" && (fbAuthResponse != null)) {
          FB.api("/me", function(response2) {
            _this.set("currentUser", new User({
              name: response2.name,
              userId: fbAuthResponse.userID
            }));
            socket = io.connect();
            return socket.on("connect", function() {
              return socket.emit("handshake", {
                userId: _this.get("userId")
              }, function(_arg1) {
                var dbAccessToken;
                dbAccessToken = _arg1.dbAccessToken;
                if (dbAccessToken != null) {
                  (function() {})();
                }
                _this.set("pageLoading", false);
                return delete _this.fbLoginStatusChanged.inProgress;
              });
            });
          });
        } else {
          _this.unset("currentUser");
          if (socket != null) {
            socket.disconnect();
          }
          _this.set("pageLoading", false);
        }
        return delete _this.fbLoginStatusChanged.inProgress;
      });
      FB.getLoginStatus(this.fbLoginStatusChanged);
    }

    AppContext.prototype.fbLogin = function() {
      return FB.login();
    };

    AppContext.prototype.dbLogin = function() {
      var _this = this;
      return Dropbox.authenticate(function(error, client) {
        return console.log(arguments);
      });
    };

    return AppContext;

  })(Batman.Model);
  DropFB = (function(_super) {
    __extends(DropFB, _super);

    function DropFB() {
      _ref1 = DropFB.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    DropFB.appContext = new AppContext;

    return DropFB;

  })(Batman.App);
  return DropFB.run();
});

/*
//@ sourceMappingURL=page.map
*/
